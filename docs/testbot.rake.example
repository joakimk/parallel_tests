# This is the way I'm currently distributing / resetting the database before each run.
# It's entirely possible that a future version of testbot could automate this.

namespace :testbot do
  task :before_request do
    raise "You need to edit the example #{__FILE__} before running it."
    rails_root = File.expand_path(File.join(File.dirname(__FILE__),'../..'))
    config_path = "#{rails_root}/config/testbot.yml"
    test_database_name = YAML.load_file(config_path)["local_test_database"]
    system "mysqldump --compact -u root #{test_database_name} > #{rails_root}/tmp/test_database.sql"
  end
  
  task :before_run do    
    raise "You need to edit the example #{__FILE__} before running it."
    database_yml = <<-DB_CONFIG
test:
  adapter: mysql
  encoding: utf8
  database: !APPNAME!_testbot_test<%= ENV['TEST_ENV_NUMBER'] %>
  username: root
  password:
  host: localhost
DB_CONFIG

    rails_root = File.expand_path(File.join(File.dirname(__FILE__),'../..'))
    database_file_path = "#{rails_root}/config/database.yml"
    File.open(database_file_path, 'w') { |f| f.write(database_yml) }
    system "mysqladmin -u root -f drop !APPNAME!_testbot_test#{ENV['TEST_ENV_NUMBER']}  > /dev/null 2>&1"    
    system "mysqladmin -u root -f create !APPNAME!_testbot_test#{ENV['TEST_ENV_NUMBER']} > /dev/null 2>&1"
    system "mysql -u root !APPNAME!_testbot_test#{ENV['TEST_ENV_NUMBER']} < #{rails_root}/tmp/test_database.sql"
  end
end
